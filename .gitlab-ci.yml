stages:
  # - test
  - build
  - deploy


# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: python:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - postgres:latest

# variables:
#   POSTGRES_DB: database_name

# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - ~/.cache/pip/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  - python -V  # Print out python version for debugging
  # Uncomment next line if your Django app needs a JS runtime:
  # - apt-get update -q && apt-get install nodejs -yqq
  - pip install --index $PYPI_URL_CREDENTIALS --index-url  $PYPI_URL_CREDENTIALS/simple -r requirements.txt

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
#
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command

# test:
#   stage: test
#   # variables:
#   #   DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
#   script:
#     - python manage.py test


docker-build-master:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - name: docker:dind
      alias: docker
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    - master

docker-build-master-nexus:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - name: docker:dind
      alias: docker
  before_script:
    - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD" $DOCKER_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_REGISTRY_PREFIX/$CI_PROJECT_NAME" .
    - docker push "$DOCKER_REGISTRY_PREFIX/$CI_PROJECT_NAME"
  only:
    - master    

docker-build:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  except:
    - master

docker-build-nexus:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - name: docker:dind
      alias: docker
  before_script:
    - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD" $DOCKER_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_REGISTRY_PREFIX/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG" .
    - docker push "$DOCKER_REGISTRY_PREFIX/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG"
  except:
    - master

# deploy-droop:
#   stage: deploy
#   image: docker:latest
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   script:
#     - docker service update "$DROOP_SERVICE_NAME" --image "$CI_REGISTRY_IMAGE"
#   rules:
#     - if: '$DROOP_SERVICE_NAME == "" || $CI_COMMIT_BRANCH != "master"'
#       when: never
#     - if: '$DROOP_SERVICE_NAME != "" && $CI_COMMIT_BRANCH == "master"'
#       when: on_success
